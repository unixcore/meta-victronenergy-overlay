From 3e1a3c39d7ac6535aebbc74abc36a9779f8808ff Mon Sep 17 00:00:00 2001
From: mpvader <mvader@victronenergy.com>
Date: Mon, 12 Oct 2015 11:56:00 +0000
Subject: [PATCH 5/5] qws vncserver: add vnc authentication

the filename is passed via the commandline. Advantage of doing it
like this is that you don't have to restart the application every-
time the password is changed. The last 8 characters of the firstline
in the file are used.
---
 README.md                                     |  18 ++
 src/gui/embedded/embedded.pri                 |   6 +-
 src/plugins/gfxdrivers/vnc/README.txt         |  52 ++++
 src/plugins/gfxdrivers/vnc/d3des.c            | 430 ++++++++++++++++++++++++++
 src/plugins/gfxdrivers/vnc/d3des.h            |  51 +++
 src/plugins/gfxdrivers/vnc/qscreenvnc_p.h     |  18 +-
 src/plugins/gfxdrivers/vnc/qscreenvnc_qws.cpp | 109 ++++++-
 src/plugins/gfxdrivers/vnc/vnc.pro            |   9 +-
 8 files changed, 683 insertions(+), 10 deletions(-)
 create mode 100644 README.md
 create mode 100644 src/plugins/gfxdrivers/vnc/README.txt
 create mode 100644 src/plugins/gfxdrivers/vnc/d3des.c
 create mode 100644 src/plugins/gfxdrivers/vnc/d3des.h

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..3372d6f
--- /dev/null
+++ b/README.md
@@ -0,0 +1,18 @@
+# qt
+
+This is the 4.8.3 version of qt (http://code.qt.io/cgit/qt/qt.git/tag/?h=v4.8.3), with Victron Energy
+additions, see commits.
+
+Notes on the VNC Server:
+  - We use it together with https://github.com/kanaka/noVNC: a javascript vnc client, and use
+  https://github.com/kanaka/websockify as a proxy.
+  - See branch for current status of implementing the VNC password.
+  - Interesting for further development: I found this link: https://github.com/connectedtable/qt-libvncserver,
+  which might be interesting: It uses the library LibVNCServer to act as a middle hand instead of the internal
+  vnc plugin bundled with Qt. The one big issue with LibVNCServer is that it is GPL, so even when used as an
+  dynamically loaded binary, it poses issues.
+  - The QWS VNC Server was dropped in QT5. There is already someone who made it work again for Qt5:
+  https://github.com/pigshell/qtbase. Note that that is meant for headless use. It has a memory framebuffer
+  which has no relation to any local display - the whole idea was to run Qt apps headless. If the Multi:: option
+  is still available in Qt5 hasn't been look into yet.
+
diff --git a/src/gui/embedded/embedded.pri b/src/gui/embedded/embedded.pri
index 836c116..bedc4bb 100644
--- a/src/gui/embedded/embedded.pri
+++ b/src/gui/embedded/embedded.pri
@@ -136,8 +136,10 @@ embedded {
 		VNCDIR = $$QT_SOURCE_TREE/src/plugins/gfxdrivers/vnc
 		INCLUDEPATH += $$VNCDIR
 		HEADERS += $$VNCDIR/qscreenvnc_qws.h \
-			   $$VNCDIR/qscreenvnc_p.h
-		SOURCES += $$VNCDIR/qscreenvnc_qws.cpp
+				$$VNCDIR/qscreenvnc_p.h \
+				$$VNCDIR/d3des.h
+		SOURCES += $$VNCDIR/qscreenvnc_qws.cpp \
+				$$VNCDIR/d3des.c
 	}
 
 	contains( gfx-drivers, transformed ) {
diff --git a/src/plugins/gfxdrivers/vnc/README.txt b/src/plugins/gfxdrivers/vnc/README.txt
new file mode 100644
index 0000000..6a47aac
--- /dev/null
+++ b/src/plugins/gfxdrivers/vnc/README.txt
@@ -0,0 +1,52 @@
+Remote debugging QWS VNC (crosscompiling).
+
+(note that it is probably possible to find another, better, solution as I explained below. The goal
+of this project was not to setup the best working tooling, it was to implement VNC authentication).
+
+Compile and install complete QT library both on host and target. See compiling QT instructions.
+
+Ofcourse install gdbserver on the CCGX.
+
+Then compile the code. To work from the /src/gfxdrivers/vnc project, instead of from the /src/gui
+project, make sure to have compiled Qt with the -plugin-gfx-vnc option, and not -qt-gfx-vnc.
+
+Build the project. After compiling, every time copy the new (Crosscompiled) library into the host location:
+sudo cp ~/dev/qt/plugins/gfxdrivers/libqgfxvnc.so /usr/local/qt4/plugins/gfxdrivers/
+
+So that copies it over the same library, but then compiled for native use on the host.
+
+Why is that necessary? Because otherwise GDB won't find the right libary, and you can't debug, set breakpoints etc.
+
+Then start up debugging. To do that, compile the CCGX GUI against the same Qt version, and deploy that to the CCGX.
+Not perse necessary, but I'd then stop that again, optionally close the gui project in Qt, and configure the
+VNC plugin project to run /opt/color-control/gui/gui.
+
+Start debugging, pause the file, and issue this command every time in the gdb command input:
+set solib-search-path /home/matthijs/dev/qt/plugins/gfxdrivers
+
+After that, you'll see in the breakpoint view that it found the file that belongs to the breakpoint. And
+"info sharedlibrary" shows:
+
+>~"0xb6fd87a0  0xb6ff2a78  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/ld-linux.so.3\n"
+>~"0xb6d52b68  0xb6f591f0  Yes         /usr/local/qt4/lib/libQtDeclarative.so.4\n"
+>~"0xb6ae5fb0  0xb6c994f4  Yes         /usr/local/qt4/lib/libQtScript.so.4\n"
+>~"0xb6a24f1c  0xb6aae814  Yes         /usr/local/qt4/lib/libQtSql.so.4\n"
+>~"0xb66c6888  0xb6973be4  Yes         /usr/local/qt4/lib/libQtXmlPatterns.so.4\n"
+>~"0xb6617784  0xb666b38c  Yes         /usr/local/qt4/lib/libQtDBus.so.4\n"
+>~"0xb65d3424  0xb65f8944  Yes         /usr/local/qt4/lib/libQtXml.so.4\n"
+>~"0xb5916f30  0xb638127c  Yes         /usr/local/qt4/lib/libQtGui.so.4\n"
+>~"0xb56e50b4  0xb5790864  Yes         /usr/local/qt4/lib/libQtNetwork.so.4\n"
+>~"0xb5401fc4  0xb5594110  Yes         /usr/local/qt4/lib/libQtCore.so.4\n"
+>~"0xb53846e8  0xb53a66f4  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/usr/lib/libdbus-1.so.3\n"
+>~"0xb5363fb0  0xb5371b94  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/libpthread.so.0\n"
+>~"0x4e2d0ba8  0x4e331150  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/usr/lib/libstdc++.so.6\n"
+>~"0xb52f2bd0  0xb5321140  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/libm.so.6\n"
+>~"0x4e145180  0x4e1552a4  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/libgcc_s.so.1\n"
+>~"0xb51d18f0  0xb52c0dd8  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/libc.so.6\n"
+>~"0xb51ae760  0xb51b2224  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/librt.so.1\n"
+>~"0xb51a2968  0xb51a374c  Yes         /opt/venus/current/sysroots/armv7a-vfp-neon-ve-linux-gnueabi/lib/libdl.so.2\n"
+>~"0xb41ca97c  0xb41cdb40  Yes         /usr/local/qt4/plugins/imageformats/libqgif.so\n"
+>~"0xb3973c7c  0xb3976c04  Yes         /usr/local/qt4/plugins/imageformats/libqico.so\n"
+>~"0xb392fb08  0xb39663d4  Yes         /usr/local/qt4/plugins/imageformats/libqjpeg.so\n"
+>~"0xb3922890  0xb3924200  Yes         /usr/local/qt4/plugins/imageformats/libqtga.so\n"
+>81^done
diff --git a/src/plugins/gfxdrivers/vnc/d3des.c b/src/plugins/gfxdrivers/vnc/d3des.c
new file mode 100644
index 0000000..040964f
--- /dev/null
+++ b/src/plugins/gfxdrivers/vnc/d3des.c
@@ -0,0 +1,430 @@
+/*
+ * This is D3DES (V5.09) by Richard Outerbridge with the double and
+ * triple-length support removed for use in VNC.  Also the bytebit[] array
+ * has been reversed so that the most significant bit in each byte of the
+ * key is ignored, not the least significant.
+ *
+ * These changes are:
+ *  Copyright (C) 1999 AT&T Laboratories Cambridge.  All Rights Reserved.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ */
+
+/* D3DES (V5.09) -
+ *
+ * A portable, public domain, version of the Data Encryption Standard.
+ *
+ * Written with Symantec's THINK (Lightspeed) C by Richard Outerbridge.
+ * Thanks to: Dan Hoey for his excellent Initial and Inverse permutation
+ * code;  Jim Gillogly & Phil Karn for the DES key schedule code; Dennis
+ * Ferguson, Eric Young and Dana How for comparing notes; and Ray Lau,
+ * for humouring me on.
+ *
+ * Copyright (c) 1988,1989,1990,1991,1992 by Richard Outerbridge.
+ * (GEnie : OUTER; CIS : [71755,204]) Graven Imagery, 1992.
+ */
+
+#include "d3des.h"
+
+static void scrunch(unsigned char *, unsigned long *);
+static void unscrun(unsigned long *, unsigned char *);
+static void desfunc(unsigned long *, unsigned long *);
+static void cookey(unsigned long *);
+
+static unsigned long KnL[32] = { 0L };
+static unsigned long KnR[32] = { 0L };
+static unsigned long Kn3[32] = { 0L };
+static unsigned char Df_Key[24] = {
+	0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,
+	0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10,
+	0x89,0xab,0xcd,0xef,0x01,0x23,0x45,0x67 };
+
+static unsigned short bytebit[8]	= {
+	01, 02, 04, 010, 020, 040, 0100, 0200 };
+
+static unsigned long bigbyte[24] = {
+	0x800000L,	0x400000L,	0x200000L,	0x100000L,
+	0x80000L,	0x40000L,	0x20000L,	0x10000L,
+	0x8000L,	0x4000L,	0x2000L,	0x1000L,
+	0x800L, 	0x400L, 	0x200L, 	0x100L,
+	0x80L,		0x40L,		0x20L,		0x10L,
+	0x8L,		0x4L,		0x2L,		0x1L	};
+
+/* Use the key schedule specified in the Standard (ANSI X3.92-1981). */
+
+static unsigned char pc1[56] = {
+	56, 48, 40, 32, 24, 16,  8,	 0, 57, 49, 41, 33, 25, 17,
+	 9,  1, 58, 50, 42, 34, 26,	18, 10,  2, 59, 51, 43, 35,
+	62, 54, 46, 38, 30, 22, 14,	 6, 61, 53, 45, 37, 29, 21,
+	13,  5, 60, 52, 44, 36, 28,	20, 12,  4, 27, 19, 11,  3 };
+
+static unsigned char totrot[16] = {
+	1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28 };
+
+static unsigned char pc2[48] = {
+	13, 16, 10, 23,  0,  4,  2, 27, 14,  5, 20,  9,
+	22, 18, 11,  3, 25,  7, 15,  6, 26, 19, 12,  1,
+	40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47,
+	43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31 };
+
+/* Thanks to James Gillogly & Phil Karn! */
+void deskey(unsigned char* key, int edf)
+{
+	register int i, j, l, m, n;
+	unsigned char pc1m[56], pcr[56];
+	unsigned long kn[32];
+
+	for ( j = 0; j < 56; j++ ) {
+		l = pc1[j];
+		m = l & 07;
+		pc1m[j] = (key[l >> 3] & bytebit[m]) ? 1 : 0;
+		}
+	for( i = 0; i < 16; i++ ) {
+		if( edf == DE1 ) m = (15 - i) << 1;
+		else m = i << 1;
+		n = m + 1;
+		kn[m] = kn[n] = 0L;
+		for( j = 0; j < 28; j++ ) {
+			l = j + totrot[i];
+			if( l < 28 ) pcr[j] = pc1m[l];
+			else pcr[j] = pc1m[l - 28];
+			}
+		for( j = 28; j < 56; j++ ) {
+		    l = j + totrot[i];
+		    if( l < 56 ) pcr[j] = pc1m[l];
+		    else pcr[j] = pc1m[l - 28];
+		    }
+		for( j = 0; j < 24; j++ ) {
+			if( pcr[pc2[j]] ) kn[m] |= bigbyte[j];
+			if( pcr[pc2[j+24]] ) kn[n] |= bigbyte[j];
+			}
+		}
+	cookey(kn);
+	return;
+	}
+
+static void cookey(register unsigned long *raw1)
+{
+	register unsigned long *cook, *raw0;
+	unsigned long dough[32];
+	register int i;
+
+	cook = dough;
+	for( i = 0; i < 16; i++, raw1++ ) {
+		raw0 = raw1++;
+		*cook	 = (*raw0 & 0x00fc0000L) << 6;
+		*cook	|= (*raw0 & 0x00000fc0L) << 10;
+		*cook	|= (*raw1 & 0x00fc0000L) >> 10;
+		*cook++ |= (*raw1 & 0x00000fc0L) >> 6;
+		*cook	 = (*raw0 & 0x0003f000L) << 12;
+		*cook	|= (*raw0 & 0x0000003fL) << 16;
+		*cook	|= (*raw1 & 0x0003f000L) >> 4;
+		*cook++ |= (*raw1 & 0x0000003fL);
+		}
+	usekey(dough);
+	return;
+	}
+
+void cpkey(register unsigned long *into)
+{
+	register unsigned long *from, *endp;
+
+	from = KnL, endp = &KnL[32];
+	while( from < endp ) *into++ = *from++;
+	return;
+	}
+
+void usekey(register unsigned long *from)
+{
+	register unsigned long *to, *endp;
+
+	to = KnL, endp = &KnL[32];
+	while( to < endp ) *to++ = *from++;
+	return;
+	}
+
+void des(unsigned char *inblock, unsigned char *outblock)
+{
+	unsigned long work[2];
+
+	scrunch(inblock, work);
+	desfunc(work, KnL);
+	unscrun(work, outblock);
+	return;
+	}
+
+static void scrunch(register unsigned char *outof, register unsigned long *into)
+{
+	*into	 = (*outof++ & 0xffL) << 24;
+	*into	|= (*outof++ & 0xffL) << 16;
+	*into	|= (*outof++ & 0xffL) << 8;
+	*into++ |= (*outof++ & 0xffL);
+	*into	 = (*outof++ & 0xffL) << 24;
+	*into	|= (*outof++ & 0xffL) << 16;
+	*into	|= (*outof++ & 0xffL) << 8;
+	*into	|= (*outof   & 0xffL);
+	return;
+	}
+
+static void unscrun(register unsigned long *outof, register unsigned char *into)
+{
+	*into++ = (*outof >> 24) & 0xffL;
+	*into++ = (*outof >> 16) & 0xffL;
+	*into++ = (*outof >>  8) & 0xffL;
+	*into++ =  *outof++	 & 0xffL;
+	*into++ = (*outof >> 24) & 0xffL;
+	*into++ = (*outof >> 16) & 0xffL;
+	*into++ = (*outof >>  8) & 0xffL;
+	*into	=  *outof	 & 0xffL;
+	return;
+	}
+
+static unsigned long SP1[64] = {
+	0x01010400L, 0x00000000L, 0x00010000L, 0x01010404L,
+	0x01010004L, 0x00010404L, 0x00000004L, 0x00010000L,
+	0x00000400L, 0x01010400L, 0x01010404L, 0x00000400L,
+	0x01000404L, 0x01010004L, 0x01000000L, 0x00000004L,
+	0x00000404L, 0x01000400L, 0x01000400L, 0x00010400L,
+	0x00010400L, 0x01010000L, 0x01010000L, 0x01000404L,
+	0x00010004L, 0x01000004L, 0x01000004L, 0x00010004L,
+	0x00000000L, 0x00000404L, 0x00010404L, 0x01000000L,
+	0x00010000L, 0x01010404L, 0x00000004L, 0x01010000L,
+	0x01010400L, 0x01000000L, 0x01000000L, 0x00000400L,
+	0x01010004L, 0x00010000L, 0x00010400L, 0x01000004L,
+	0x00000400L, 0x00000004L, 0x01000404L, 0x00010404L,
+	0x01010404L, 0x00010004L, 0x01010000L, 0x01000404L,
+	0x01000004L, 0x00000404L, 0x00010404L, 0x01010400L,
+	0x00000404L, 0x01000400L, 0x01000400L, 0x00000000L,
+	0x00010004L, 0x00010400L, 0x00000000L, 0x01010004L };
+
+static unsigned long SP2[64] = {
+	0x80108020L, 0x80008000L, 0x00008000L, 0x00108020L,
+	0x00100000L, 0x00000020L, 0x80100020L, 0x80008020L,
+	0x80000020L, 0x80108020L, 0x80108000L, 0x80000000L,
+	0x80008000L, 0x00100000L, 0x00000020L, 0x80100020L,
+	0x00108000L, 0x00100020L, 0x80008020L, 0x00000000L,
+	0x80000000L, 0x00008000L, 0x00108020L, 0x80100000L,
+	0x00100020L, 0x80000020L, 0x00000000L, 0x00108000L,
+	0x00008020L, 0x80108000L, 0x80100000L, 0x00008020L,
+	0x00000000L, 0x00108020L, 0x80100020L, 0x00100000L,
+	0x80008020L, 0x80100000L, 0x80108000L, 0x00008000L,
+	0x80100000L, 0x80008000L, 0x00000020L, 0x80108020L,
+	0x00108020L, 0x00000020L, 0x00008000L, 0x80000000L,
+	0x00008020L, 0x80108000L, 0x00100000L, 0x80000020L,
+	0x00100020L, 0x80008020L, 0x80000020L, 0x00100020L,
+	0x00108000L, 0x00000000L, 0x80008000L, 0x00008020L,
+	0x80000000L, 0x80100020L, 0x80108020L, 0x00108000L };
+
+static unsigned long SP3[64] = {
+	0x00000208L, 0x08020200L, 0x00000000L, 0x08020008L,
+	0x08000200L, 0x00000000L, 0x00020208L, 0x08000200L,
+	0x00020008L, 0x08000008L, 0x08000008L, 0x00020000L,
+	0x08020208L, 0x00020008L, 0x08020000L, 0x00000208L,
+	0x08000000L, 0x00000008L, 0x08020200L, 0x00000200L,
+	0x00020200L, 0x08020000L, 0x08020008L, 0x00020208L,
+	0x08000208L, 0x00020200L, 0x00020000L, 0x08000208L,
+	0x00000008L, 0x08020208L, 0x00000200L, 0x08000000L,
+	0x08020200L, 0x08000000L, 0x00020008L, 0x00000208L,
+	0x00020000L, 0x08020200L, 0x08000200L, 0x00000000L,
+	0x00000200L, 0x00020008L, 0x08020208L, 0x08000200L,
+	0x08000008L, 0x00000200L, 0x00000000L, 0x08020008L,
+	0x08000208L, 0x00020000L, 0x08000000L, 0x08020208L,
+	0x00000008L, 0x00020208L, 0x00020200L, 0x08000008L,
+	0x08020000L, 0x08000208L, 0x00000208L, 0x08020000L,
+	0x00020208L, 0x00000008L, 0x08020008L, 0x00020200L };
+
+static unsigned long SP4[64] = {
+	0x00802001L, 0x00002081L, 0x00002081L, 0x00000080L,
+	0x00802080L, 0x00800081L, 0x00800001L, 0x00002001L,
+	0x00000000L, 0x00802000L, 0x00802000L, 0x00802081L,
+	0x00000081L, 0x00000000L, 0x00800080L, 0x00800001L,
+	0x00000001L, 0x00002000L, 0x00800000L, 0x00802001L,
+	0x00000080L, 0x00800000L, 0x00002001L, 0x00002080L,
+	0x00800081L, 0x00000001L, 0x00002080L, 0x00800080L,
+	0x00002000L, 0x00802080L, 0x00802081L, 0x00000081L,
+	0x00800080L, 0x00800001L, 0x00802000L, 0x00802081L,
+	0x00000081L, 0x00000000L, 0x00000000L, 0x00802000L,
+	0x00002080L, 0x00800080L, 0x00800081L, 0x00000001L,
+	0x00802001L, 0x00002081L, 0x00002081L, 0x00000080L,
+	0x00802081L, 0x00000081L, 0x00000001L, 0x00002000L,
+	0x00800001L, 0x00002001L, 0x00802080L, 0x00800081L,
+	0x00002001L, 0x00002080L, 0x00800000L, 0x00802001L,
+	0x00000080L, 0x00800000L, 0x00002000L, 0x00802080L };
+
+static unsigned long SP5[64] = {
+	0x00000100L, 0x02080100L, 0x02080000L, 0x42000100L,
+	0x00080000L, 0x00000100L, 0x40000000L, 0x02080000L,
+	0x40080100L, 0x00080000L, 0x02000100L, 0x40080100L,
+	0x42000100L, 0x42080000L, 0x00080100L, 0x40000000L,
+	0x02000000L, 0x40080000L, 0x40080000L, 0x00000000L,
+	0x40000100L, 0x42080100L, 0x42080100L, 0x02000100L,
+	0x42080000L, 0x40000100L, 0x00000000L, 0x42000000L,
+	0x02080100L, 0x02000000L, 0x42000000L, 0x00080100L,
+	0x00080000L, 0x42000100L, 0x00000100L, 0x02000000L,
+	0x40000000L, 0x02080000L, 0x42000100L, 0x40080100L,
+	0x02000100L, 0x40000000L, 0x42080000L, 0x02080100L,
+	0x40080100L, 0x00000100L, 0x02000000L, 0x42080000L,
+	0x42080100L, 0x00080100L, 0x42000000L, 0x42080100L,
+	0x02080000L, 0x00000000L, 0x40080000L, 0x42000000L,
+	0x00080100L, 0x02000100L, 0x40000100L, 0x00080000L,
+	0x00000000L, 0x40080000L, 0x02080100L, 0x40000100L };
+
+static unsigned long SP6[64] = {
+	0x20000010L, 0x20400000L, 0x00004000L, 0x20404010L,
+	0x20400000L, 0x00000010L, 0x20404010L, 0x00400000L,
+	0x20004000L, 0x00404010L, 0x00400000L, 0x20000010L,
+	0x00400010L, 0x20004000L, 0x20000000L, 0x00004010L,
+	0x00000000L, 0x00400010L, 0x20004010L, 0x00004000L,
+	0x00404000L, 0x20004010L, 0x00000010L, 0x20400010L,
+	0x20400010L, 0x00000000L, 0x00404010L, 0x20404000L,
+	0x00004010L, 0x00404000L, 0x20404000L, 0x20000000L,
+	0x20004000L, 0x00000010L, 0x20400010L, 0x00404000L,
+	0x20404010L, 0x00400000L, 0x00004010L, 0x20000010L,
+	0x00400000L, 0x20004000L, 0x20000000L, 0x00004010L,
+	0x20000010L, 0x20404010L, 0x00404000L, 0x20400000L,
+	0x00404010L, 0x20404000L, 0x00000000L, 0x20400010L,
+	0x00000010L, 0x00004000L, 0x20400000L, 0x00404010L,
+	0x00004000L, 0x00400010L, 0x20004010L, 0x00000000L,
+	0x20404000L, 0x20000000L, 0x00400010L, 0x20004010L };
+
+static unsigned long SP7[64] = {
+	0x00200000L, 0x04200002L, 0x04000802L, 0x00000000L,
+	0x00000800L, 0x04000802L, 0x00200802L, 0x04200800L,
+	0x04200802L, 0x00200000L, 0x00000000L, 0x04000002L,
+	0x00000002L, 0x04000000L, 0x04200002L, 0x00000802L,
+	0x04000800L, 0x00200802L, 0x00200002L, 0x04000800L,
+	0x04000002L, 0x04200000L, 0x04200800L, 0x00200002L,
+	0x04200000L, 0x00000800L, 0x00000802L, 0x04200802L,
+	0x00200800L, 0x00000002L, 0x04000000L, 0x00200800L,
+	0x04000000L, 0x00200800L, 0x00200000L, 0x04000802L,
+	0x04000802L, 0x04200002L, 0x04200002L, 0x00000002L,
+	0x00200002L, 0x04000000L, 0x04000800L, 0x00200000L,
+	0x04200800L, 0x00000802L, 0x00200802L, 0x04200800L,
+	0x00000802L, 0x04000002L, 0x04200802L, 0x04200000L,
+	0x00200800L, 0x00000000L, 0x00000002L, 0x04200802L,
+	0x00000000L, 0x00200802L, 0x04200000L, 0x00000800L,
+	0x04000002L, 0x04000800L, 0x00000800L, 0x00200002L };
+
+static unsigned long SP8[64] = {
+	0x10001040L, 0x00001000L, 0x00040000L, 0x10041040L,
+	0x10000000L, 0x10001040L, 0x00000040L, 0x10000000L,
+	0x00040040L, 0x10040000L, 0x10041040L, 0x00041000L,
+	0x10041000L, 0x00041040L, 0x00001000L, 0x00000040L,
+	0x10040000L, 0x10000040L, 0x10001000L, 0x00001040L,
+	0x00041000L, 0x00040040L, 0x10040040L, 0x10041000L,
+	0x00001040L, 0x00000000L, 0x00000000L, 0x10040040L,
+	0x10000040L, 0x10001000L, 0x00041040L, 0x00040000L,
+	0x00041040L, 0x00040000L, 0x10041000L, 0x00001000L,
+	0x00000040L, 0x10040040L, 0x00001000L, 0x00041040L,
+	0x10001000L, 0x00000040L, 0x10000040L, 0x10040000L,
+	0x10040040L, 0x10000000L, 0x00040000L, 0x10001040L,
+	0x00000000L, 0x10041040L, 0x00040040L, 0x10000040L,
+	0x10040000L, 0x10001000L, 0x10001040L, 0x00000000L,
+	0x10041040L, 0x00041000L, 0x00041000L, 0x00001040L,
+	0x00001040L, 0x00040040L, 0x10000000L, 0x10041000L };
+
+static void desfunc(register unsigned long *block, register unsigned long *keys)
+{
+	register unsigned long fval, work, right, leftt;
+	register int round;
+
+	leftt = block[0];
+	right = block[1];
+	work = ((leftt >> 4) ^ right) & 0x0f0f0f0fL;
+	right ^= work;
+	leftt ^= (work << 4);
+	work = ((leftt >> 16) ^ right) & 0x0000ffffL;
+	right ^= work;
+	leftt ^= (work << 16);
+	work = ((right >> 2) ^ leftt) & 0x33333333L;
+	leftt ^= work;
+	right ^= (work << 2);
+	work = ((right >> 8) ^ leftt) & 0x00ff00ffL;
+	leftt ^= work;
+	right ^= (work << 8);
+	right = ((right << 1) | ((right >> 31) & 1L)) & 0xffffffffL;
+	work = (leftt ^ right) & 0xaaaaaaaaL;
+	leftt ^= work;
+	right ^= work;
+	leftt = ((leftt << 1) | ((leftt >> 31) & 1L)) & 0xffffffffL;
+
+	for( round = 0; round < 8; round++ ) {
+		work  = (right << 28) | (right >> 4);
+		work ^= *keys++;
+		fval  = SP7[ work		 & 0x3fL];
+		fval |= SP5[(work >>  8) & 0x3fL];
+		fval |= SP3[(work >> 16) & 0x3fL];
+		fval |= SP1[(work >> 24) & 0x3fL];
+		work  = right ^ *keys++;
+		fval |= SP8[ work		 & 0x3fL];
+		fval |= SP6[(work >>  8) & 0x3fL];
+		fval |= SP4[(work >> 16) & 0x3fL];
+		fval |= SP2[(work >> 24) & 0x3fL];
+		leftt ^= fval;
+		work  = (leftt << 28) | (leftt >> 4);
+		work ^= *keys++;
+		fval  = SP7[ work		 & 0x3fL];
+		fval |= SP5[(work >>  8) & 0x3fL];
+		fval |= SP3[(work >> 16) & 0x3fL];
+		fval |= SP1[(work >> 24) & 0x3fL];
+		work  = leftt ^ *keys++;
+		fval |= SP8[ work		 & 0x3fL];
+		fval |= SP6[(work >>  8) & 0x3fL];
+		fval |= SP4[(work >> 16) & 0x3fL];
+		fval |= SP2[(work >> 24) & 0x3fL];
+		right ^= fval;
+		}
+
+	right = (right << 31) | (right >> 1);
+	work = (leftt ^ right) & 0xaaaaaaaaL;
+	leftt ^= work;
+	right ^= work;
+	leftt = (leftt << 31) | (leftt >> 1);
+	work = ((leftt >> 8) ^ right) & 0x00ff00ffL;
+	right ^= work;
+	leftt ^= (work << 8);
+	work = ((leftt >> 2) ^ right) & 0x33333333L;
+	right ^= work;
+	leftt ^= (work << 2);
+	work = ((right >> 16) ^ leftt) & 0x0000ffffL;
+	leftt ^= work;
+	right ^= (work << 16);
+	work = ((right >> 4) ^ leftt) & 0x0f0f0f0fL;
+	leftt ^= work;
+	right ^= (work << 4);
+	*block++ = right;
+	*block = leftt;
+	return;
+	}
+
+/* Validation sets:
+ *
+ * Single-length key, single-length plaintext -
+ * Key	  : 0123 4567 89ab cdef
+ * Plain  : 0123 4567 89ab cde7
+ * Cipher : c957 4425 6a5e d31d
+ *
+ * Double-length key, single-length plaintext -
+ * Key	  : 0123 4567 89ab cdef fedc ba98 7654 3210
+ * Plain  : 0123 4567 89ab cde7
+ * Cipher : 7f1d 0a77 826b 8aff
+ *
+ * Double-length key, double-length plaintext -
+ * Key	  : 0123 4567 89ab cdef fedc ba98 7654 3210
+ * Plain  : 0123 4567 89ab cdef 0123 4567 89ab cdff
+ * Cipher : 27a0 8440 406a df60 278f 47cf 42d6 15d7
+ *
+ * Triple-length key, single-length plaintext -
+ * Key	  : 0123 4567 89ab cdef fedc ba98 7654 3210 89ab cdef 0123 4567
+ * Plain  : 0123 4567 89ab cde7
+ * Cipher : de0b 7c06 ae5e 0ed5
+ *
+ * Triple-length key, double-length plaintext -
+ * Key	  : 0123 4567 89ab cdef fedc ba98 7654 3210 89ab cdef 0123 4567
+ * Plain  : 0123 4567 89ab cdef 0123 4567 89ab cdff
+ * Cipher : ad0d 1b30 ac17 cf07 0ed1 1c63 81e4 4de5
+ *
+ * d3des V5.0a rwo 9208.07 18:44 Graven Imagery
+ **********************************************************************/
diff --git a/src/plugins/gfxdrivers/vnc/d3des.h b/src/plugins/gfxdrivers/vnc/d3des.h
new file mode 100644
index 0000000..ea3da44
--- /dev/null
+++ b/src/plugins/gfxdrivers/vnc/d3des.h
@@ -0,0 +1,51 @@
+/*
+ * This is D3DES (V5.09) by Richard Outerbridge with the double and
+ * triple-length support removed for use in VNC.
+ *
+ * These changes are:
+ *  Copyright (C) 1999 AT&T Laboratories Cambridge.  All Rights Reserved.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+ */
+
+/* d3des.h -
+ *
+ *	Headers and defines for d3des.c
+ *	Graven Imagery, 1992.
+ *
+ * Copyright (c) 1988,1989,1990,1991,1992 by Richard Outerbridge
+ *	(GEnie : OUTER; CIS : [71755,204])
+ */
+
+#define EN0	0	/* MODE == encrypt */
+#define DE1	1	/* MODE == decrypt */
+
+extern void deskey(unsigned char *, int);
+/*		      hexkey[8]     MODE
+ * Sets the internal key register according to the hexadecimal
+ * key contained in the 8 bytes of hexkey, according to the DES,
+ * for encryption or decryption according to MODE.
+ */
+
+extern void usekey(unsigned long *);
+/*		    cookedkey[32]
+ * Loads the internal key register with the data in cookedkey.
+ */
+
+extern void cpkey(unsigned long *);
+/*		   cookedkey[32]
+ * Copies the contents of the internal key register into the storage
+ * located at &cookedkey[0].
+ */
+
+extern void des(unsigned char *, unsigned char *);
+/*		    from[8]	      to[8]
+ * Encrypts/Decrypts (according to the key currently loaded in the
+ * internal key register) one block of eight bytes at address 'from'
+ * into the block at address 'to'.  They can be the same.
+ */
+
+/* d3des.h V5.09 rwo 9208.04 15:06 Graven Imagery
+ ********************************************************************/
diff --git a/src/plugins/gfxdrivers/vnc/qscreenvnc_p.h b/src/plugins/gfxdrivers/vnc/qscreenvnc_p.h
index 2a99220..692ce56 100644
--- a/src/plugins/gfxdrivers/vnc/qscreenvnc_p.h
+++ b/src/plugins/gfxdrivers/vnc/qscreenvnc_p.h
@@ -62,6 +62,11 @@
 #include <QtNetwork/qtcpsocket.h>
 #include <QtNetwork/qtcpserver.h>
 
+extern "C" {
+#include "d3des.h"
+#define CHALLENGESIZE 16
+}
+
 QT_BEGIN_NAMESPACE
 
 class QVNCServer;
@@ -252,6 +257,7 @@ public:
     bool doOnScreenSurface;
     QVNCDirtyMap *dirty;
     int refreshRate;
+    QString passwordFile;
     QVNCServer *vncServer;
 
 #if !defined(QT_NO_QWS_MULTIPROCESS) && !defined(QT_NO_SHAREDMEMORY)
@@ -440,7 +446,7 @@ public:
     void setDirtyCursor() { dirtyCursor = true; setDirty(); }
     inline bool isConnected() const { return state == Connected; }
     inline void setRefreshRate(int rate) { refreshRate = rate; }
-
+    inline void setPasswordFile(const QString &pwdFile) { passwordFile = pwdFile; }
     enum ClientMsg { SetPixelFormat = 0,
                      FixColourMapEntries = 1,
                      SetEncodings = 2,
@@ -475,6 +481,12 @@ private:
     void keyEvent();
     void clientCutText();
     bool pixelConversionNeeded() const;
+    bool readPasswordFile(QString &password);
+    inline void disconnectClient() {
+        client->close();  // automaticaly calls discardClient()
+        delete client;
+        client = 0;
+    }
 
 private slots:
     void newConnection();
@@ -484,11 +496,13 @@ private slots:
 
 private:
     void init(uint port);
-    enum ClientState { Unconnected, Protocol, Init, Connected };
+    enum ClientState { Unconnected, Protocol, SecurityResult, Init, Connected };
     QTimer *timer;
     QTcpServer *serverSocket;
     QTcpSocket *client;
     ClientState state;
+    unsigned char challenge[CHALLENGESIZE];
+    QString passwordFile;
     quint8 msgType;
     bool handleMsg;
     QRfbPixelFormat pixelFormat;
diff --git a/src/plugins/gfxdrivers/vnc/qscreenvnc_qws.cpp b/src/plugins/gfxdrivers/vnc/qscreenvnc_qws.cpp
index 30eadba..dfb8b90 100644
--- a/src/plugins/gfxdrivers/vnc/qscreenvnc_qws.cpp
+++ b/src/plugins/gfxdrivers/vnc/qscreenvnc_qws.cpp
@@ -636,6 +636,7 @@ void QVNCServer::newConnection()
         delete client;
 
     client = serverSocket->nextPendingConnection();
+    qDebug() << "QVNCServer new incoming connection from" << client->peerAddress().toString();
     connect(client,SIGNAL(readyRead()),this,SLOT(readClient()));
     connect(client,SIGNAL(disconnected()),this,SLOT(discardClient()));
     handleMsg = false;
@@ -656,6 +657,17 @@ void QVNCServer::newConnection()
         QWSServer::instance()->enablePainting(true);
 }
 
+bool QVNCServer::readPasswordFile(QString &password)
+{
+    QFile file(passwordFile);
+    if (passwordFile.isEmpty() || !file.open(QIODevice::ReadOnly))
+        return false;
+
+    password = file.readAll().trimmed().right(8);
+
+    return true;
+}
+
 void QVNCServer::readClient()
 {
     switch (state) {
@@ -664,11 +676,94 @@ void QVNCServer::readClient()
                 char proto[13];
                 client->read(proto, 12);
                 proto[12] = '\0';
-                qDebug("Client protocol version %s", proto);
-                // No authentication
-                quint32 auth = htonl(1);
+                qDebug("QVNCServer Client protocol version %s", proto);
+
+                QString password;
+                bool passwordReadOK = readPasswordFile(password);
+
+                if (passwordFile.isEmpty() || (passwordReadOK && password.isEmpty())) {
+                    // Password file not set, or set but is an empty file: come on in!
+                    qDebug("QVNCServer No password configured, accepting connection");
+                    quint32 auth = htonl(1);
+                    client->write((char *) &auth, sizeof(auth));
+                    state = Init;
+                } else if (!passwordFile.isEmpty() && !passwordReadOK) {
+                    // Password file set, but can't be read: disconnect.
+                    qCritical() << "QVNCServer configured to use a password, but the file containing "
+                                   "the password can't be read. Disconnecting!!";
+                    disconnectClient();
+                    break;
+                } else {
+                    // vnc password authentication
+                    quint32 auth = htonl(2);
+                    client->write((char *) &auth, sizeof(auth));
+
+                    // Create and random challenge string as the challenge
+                    //      Note: This is linux only! For windows one ought to use this one:
+                    //      https://en.wikipedia.org/wiki/CryptGenRandom
+                    //      TODO: maybe add some feature to make compiling fail under windows?
+                    QFile file("/dev/urandom");
+                    if (!file.open(QIODevice::ReadOnly)) {
+                        qCritical() << "QVNCServer configured to use a password, but /dev/urandom "
+                                       "is not available. Disconnecting!!";
+                        disconnectClient();
+                        break;
+                    }
+
+                    qint64 bytesRead = file.read((char *) challenge, CHALLENGESIZE);
+                    if (bytesRead != CHALLENGESIZE) {
+                        qCritical() << "QVNCServer could not read the right number of random bytes from "
+                                       "/dev/urandom Disconnecting!!";
+                        disconnectClient();
+                        break;
+                    }
+
+                    file.close();
+
+                    // Send it
+                    client->write((char *) challenge, CHALLENGESIZE);
+                    state = SecurityResult;
+                }
+            }
+            break;
+
+        case SecurityResult:
+            if (client->bytesAvailable() >= CHALLENGESIZE)
+            {
+                unsigned char response[CHALLENGESIZE];
+                client->read((char *) response, CHALLENGESIZE);
+
+                // Read the password and encrypt. DES expects an 8 byte password, padded with 0's
+                QString password;
+                bool readOK = readPasswordFile(password);
+                if (!readOK) {
+                    // Password file set, but can't be read. Strange, since on connect it could be read.
+                    qCritical() << "QVNCServer configured to use a password, but the file containing "
+                                   "the password can't be read during SecurityResult. Disconnecting!!";
+                    disconnectClient();
+                    break;
+                }
+
+                QString key = password.leftJustified(8, 0);
+                deskey((unsigned char *) key.toLatin1().data(), EN0);
+                for (int i = 0; i < CHALLENGESIZE; i += 8)
+                    des(challenge+i, challenge+i);
+
+                // Check if the password matched by comparing our encrypted challenge
+                // with the response as sent by the client.
+                bool ok = (memcmp(challenge, response, CHALLENGESIZE) == 0);
+
+                qDebug("QVNCServer Authentication %s", ok ? "passed!" : "failed!");
+
+                quint32 auth = htonl(ok ? 0 : 1);
                 client->write((char *) &auth, sizeof(auth));
-                state = Init;
+                if (ok) {
+                    state = Init;
+                } else {
+                    client->waitForBytesWritten(2000);
+                    disconnectClient();
+                    memset(challenge, 0, CHALLENGESIZE);
+                }
             }
             break;
 
@@ -2030,6 +2125,7 @@ void QVNCServer::checkUpdate()
 
 void QVNCServer::discardClient()
 {
+    qDebug() << "QVNCServer disconnected from" << client->peerAddress().toString();
     timer->stop();
     state = Unconnected;
     delete encoder;
@@ -2196,6 +2292,10 @@ bool QVNCScreen::connect(const QString &displaySpec)
         if (args.indexOf(depthRegexp) != -1)
             d = depthRegexp.cap(1).toInt();
 
+        QRegExp passwordRegexp(QLatin1String("^passwordFile=([^\\0]+)$"));
+        if (args.indexOf(passwordRegexp) != -1)
+            d_ptr->passwordFile = passwordRegexp.cap(1);
+
         QRegExp sizeRegexp(QLatin1String("^size=(\\d+)x(\\d+)$"));
         if (args.indexOf(sizeRegexp) != -1) {
             dw = w = sizeRegexp.cap(1).toInt();
@@ -2264,6 +2364,7 @@ bool QVNCScreen::initDevice()
     }
     d_ptr->vncServer = new QVNCServer(this, displayId);
     d_ptr->vncServer->setRefreshRate(d_ptr->refreshRate);
+    d_ptr->vncServer->setPasswordFile(d_ptr->passwordFile);
 
     switch (depth()) {
 #ifdef QT_QWS_DEPTH_32
diff --git a/src/plugins/gfxdrivers/vnc/vnc.pro b/src/plugins/gfxdrivers/vnc/vnc.pro
index 31da2f4..69fbd36 100644
--- a/src/plugins/gfxdrivers/vnc/vnc.pro
+++ b/src/plugins/gfxdrivers/vnc/vnc.pro
@@ -7,10 +7,15 @@ QTDIR_build:DESTDIR = $$QT_BUILD_TREE/plugins/gfxdrivers
 
 HEADERS = \
 	qscreenvnc_qws.h \
-	qscreenvnc_p.h
+	qscreenvnc_p.h \
+	d3des.h
 
 SOURCES = main.cpp \
-	qscreenvnc_qws.cpp
+	qscreenvnc_qws.cpp \
+	d3des.c
 
 target.path += $$[QT_INSTALL_PLUGINS]/gfxdrivers
 INSTALLS += target
+
+OTHER_FILES += \
+	README.txt
-- 
1.9.1

